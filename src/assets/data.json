[
  {
    'id': 1,
    'date': '2025-05-12',
    'question': 'What year was the Spring Framework first released?',
    'description': 'Select the correct year in which the Spring Framework 1.0 was officially released to the public.',
    'answers': {
      'a': {
        'description': '2002',
        'correct': true,
        'explanation': 'Spring Framework 1.0 was released in March 2004 after about two years of internal development, but the first public milestones appeared in 2002.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html']
      },
      'b': {
        'description': '2004',
        'correct': false,
        'explanation': 'Although 2004 saw the GA release of Spring 1.0, the framework had public milestones available since 2002.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/overview.html']
      },
      'c': {
        'description': '2006',
        'correct': false,
        'explanation': 'By 2006 Spring 2.0 was released; 2006 is not the first release.',
        'links': ['https://docs.spring.io/spring-framework/docs/2.0.x/reference/html/overview.html']
      },
      'd': {
        'description': '2008',
        'correct': false,
        'explanation': '2008 corresponds roughly to Spring 2.5, not the initial release.',
        'links': ['https://docs.spring.io/spring-framework/docs/2.5.x/reference/html/overview.html']
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Spring\'s history began around 2002 with public milestones, culminating in the GA of 1.0 in 2004. The earliest public code appeared in 2002.',
    'tags': ['Introduction', 'History'],
    'category': 'Spring Framework Overview',
    'difficulty': 'easy'
  },
  {
    'id': 2,
    'date': '2025-05-12',
    'question': 'Which core module provides the fundamental IoC container in Spring?',
    'description': 'Identify the Spring module that defines the ApplicationContext interface and BeanFactory implementations.',
    'answers': {
      'a': {
        'description': 'spring-beans',
        'correct': true,
        'explanation': 'The spring-beans module contains the BeanFactory and related classes that form the IoC container core.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/package-summary.html']
      },
      'b': {
        'description': 'spring-context',
        'correct': false,
        'explanation': 'spring-context builds on spring-beans and adds ApplicationContext, but the core container lives in spring-beans.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/package-summary.html']
      },
      'c': {
        'description': 'spring-core',
        'correct': false,
        'explanation': 'spring-core contains basic utilities (e.g., TypeUtils) but not the BeanFactory itself.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/package-summary.html']
      },
      'd': {
        'description': 'spring-expression',
        'correct': false,
        'explanation': 'spring-expression provides SpEL; it does not implement the IoC container.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/expression/package-summary.html']
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'While spring-context depends on spring-beans to expose ApplicationContext, the IoC container core lives in spring-beans.',
    'tags': ['Modules', 'Core'],
    'category': 'Spring Modules',
    'difficulty': 'medium'
  },
  {
    'id': 3,
    'date': '2025-05-12',
    'question': 'Given the following Java configuration, which beans will be registered?',
    'description': '```java\n@Configuration\n@ComponentScan(basePackages = \"com.example.app.services\")\npublic class AppConfig {\n\n  @Bean\n  public OrderService orderService() {\n    return new OrderService();\n  }\n\n}\n```',
    'answers': {
      'a': {
        'description': 'Only OrderService bean',
        'correct': false,
        'explanation': 'Component scanning will also pick up any @Component within com.example.app.services.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-scanning']
      },
      'b': {
        'description': 'OrderService plus any @Component in com.example.app.services',
        'correct': true,
        'explanation': 'The @Bean method registers OrderService; @ComponentScan registers all @Component, @Service, etc. in the package.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-java']
      },
      'c': {
        'description': 'No beans until context.refresh() is called',
        'correct': false,
        'explanation': 'Beans are registered at startup when the context is refreshed; this does not change which beans.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/context.html#context-functionality']
      },
      'd': {
        'description': 'Only classes annotated with @Service',
        'correct': false,
        'explanation': '@ComponentScan picks up @Component, @Service, @Repository, @Controller by default.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/stereotype/Component.html']
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Combining @Configuration/@Bean with @ComponentScan registers both explicitly defined beans and scanned components.',
    'tags': ['Configuration Java', 'ComponentScan'],
    'category': 'Java Configuration',
    'difficulty': 'medium'
  },
  {
    'id': 4,
    'date': '2025-05-12',
    'question': 'Which annotation would you use to inject a bean by type into a private field?',
    'description': 'Select the appropriate annotation for field-based dependency injection by type.',
    'answers': {
      'a': {
        'description': '@Inject',
        'correct': false,
        'explanation': '@Inject is standardized by JSR-330 but requires additional setup; Spring-specific is @Autowired.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-jsr-330-support']
      },
      'b': {
        'description': '@Resource',
        'correct': false,
        'explanation': '@Resource injects by name by default, not by type.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-common-annotations']
      },
      'c': {
        'description': '@Autowired',
        'correct': true,
        'explanation': 'Spring\'s @Autowired injects dependencies by type (with optional @Qualifier for disambiguation).',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation']
      },
      'd': {
        'description': '@Qualifier',
        'correct': false,
        'explanation': '@Qualifier is used alongside @Autowired to select between multiple candidates by name.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation']
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Use @Autowired on fields to have Spring resolve and inject beans by type automatically.',
    'tags': ['Dependency Injection', 'Autowired'],
    'category': 'Dependency Management',
    'difficulty': 'easy'
  },
  {
    'id': 5,
    'date': '2025-05-12',
    'question': 'Which of the following are valid ways to declare a bean in Spring Java configuration? (Choose two)',
    'description': 'Select two valid bean declaration methods using Java-based configuration.',
    'answers': {
      'a': {
        'description': '@Bean public DataSource dataSource() { ... }',
        'correct': true,
        'explanation': 'Standard @Bean method within @Configuration class.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-java']
      },
      'b': {
        'description': '@Component public class DataSource { ... }',
        'correct': true,
        'explanation': '@Component on a class scanned by @ComponentScan registers it as a bean.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-scanning']
      },
      'c': {
        'description': 'new DataSource(); in main()',
        'correct': false,
        'explanation': 'Manual instantiation without registering in ApplicationContext.',
        'links': []
      },
      'd': {
        'description': '@Configuration public class DataSource { ... }',
        'correct': false,
        'explanation': '@Configuration marks a config class, not a bean itself.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-java']
      }
    },
    'multiple_correct_answers': true,
    'explanation': 'Beans can be declared via @Bean methods or via stereotype annotations like @Component within scanned packages.',
    'tags': ['Configuration Java', 'ComponentScan'],
    'category': 'Java Configuration',
    'difficulty': 'medium'
  },
  {
    'id': 6,
    'date': '2025-05-12',
    'question': 'What will happen if multiple beans of the same type exist and @Autowired is used without @Qualifier?',
    'description': 'Consider a scenario with two beans of type PaymentService. What is the expected behavior at runtime?',
    'answers': {
      'a': {
        'description': 'Spring will pick the first defined bean silently',
        'correct': false,
        'explanation': 'Spring does not silently choose; it throws an exception on ambiguity.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-autowired-annotation']
      },
      'b': {
        'description': 'An exception due to NoUniqueBeanDefinitionException',
        'correct': true,
        'explanation': 'Without @Qualifier, Spring will fail dependency injection with NoUniqueBeanDefinitionException.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/NoUniqueBeanDefinitionException.html']
      },
      'c': {
        'description': 'Spring will pick the bean marked @Primary if available',
        'correct': false,
        'explanation': 'True if one bean has @Primary; otherwise exception.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-primary-annotation']
      },
      'd': {
        'description': 'It will fallback to constructor injection',
        'correct': false,
        'explanation': 'Constructor vs field injection is irrelevant; ambiguity remains.',
        'links': []
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Ambiguous bean definitions without @Qualifier or @Primary cause NoUniqueBeanDefinitionException at context startup.',
    'tags': ['Dependency Injection', 'Autowired', 'Exception'],
    'category': 'Dependency Management',
    'difficulty': 'medium'
  },
  {
    'id': 7,
    'date': '2025-05-12',
    'question': 'Which Expression Language feature allows bean property access in Spring EL?',
    'description': 'Choose the correct syntax to access the property name of a bean called userService in a SpEL expression.',
    'answers': {
      'a': {
        'description': '#{userService.name}',
        'correct': false,
        'explanation': 'EL expressions in annotations use #{...}, not #{} but context for SPEL is ${...}.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions']
      },
      'b': {
        'description': '${userService.name}',
        'correct': true,
        'explanation': '${...} is the correct delimiter for SpEL in Spring configurations and annotations.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#expressions-spel-syntax']
      },
      'c': {
        'description': '%{userService.name}',
        'correct': false,
        'explanation': '%{...} is not used in Spring EL.',
        'links': []
      },
      'd': {
        'description': '@{userService.name}',
        'correct': false,
        'explanation': '@{...} is not a valid EL delimiter in Spring.',
        'links': []
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Spring EL uses the ${...} syntax for evaluating expressions such as bean property access.',
    'tags': ['Expression Language', 'SpEL'],
    'category': 'Expression Language',
    'difficulty': 'medium'
  },
  {
    'id': 8,
    'date': '2025-05-12',
    'question': 'Examine the following code. Which setter injection is valid?',
    'description': '```java\n@Component\npublic class NotificationManager {\n\n  private MessageService msgService;\n\n  @Autowired\n  public void setMessageService(MessageService service) {\n    this.msgService = service;\n  }\n}\n```',
    'answers': {
      'a': {
        'description': 'Valid: setter annotated with @Autowired',
        'correct': true,
        'explanation': '@Autowired on a setter method is a supported way to inject dependencies.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependency-setter-injection']
      },
      'b': {
        'description': 'Invalid: must annotate the field directly',
        'correct': false,
        'explanation': 'Field injection is optional; setter injection with @Autowired is perfectly valid.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-dependency-injection']
      },
      'c': {
        'description': 'Invalid: setter name must start with inject',
        'correct': false,
        'explanation': 'Naming conventions are irrelevant; Spring uses annotation, not name, to identify injection points.',
        'links': []
      },
      'd': {
        'description': 'Invalid: needs @Qualifier on setter',
        'correct': false,
        'explanation': 'Qualifier is only needed when multiple candidates exist, not by default.',
        'links': []
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Spring supports setter-based injection by annotating the setter method with @Autowired.',
    'tags': ['Dependency Injection', 'Setter'],
    'category': 'Dependency Management',
    'difficulty': 'easy'
  },
  {
    'id': 9,
    'date': '2025-05-12',
    'question': 'What is the default scope of a Spring bean declared via @Bean?',
    'description': 'Choose the default bean scope when none is explicitly declared.',
    'answers': {
      'a': {
        'description': 'singleton',
        'correct': true,
        'explanation': 'By default, beans are singleton-scoped: one shared instance per Spring context.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes']
      },
      'b': {
        'description': 'prototype',
        'correct': false,
        'explanation': 'Prototype scope requires explicit @Scope("prototype") declaration.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/core.html#beans-factory-scopes-prototype']
      },
      'c': {
        'description': 'request',
        'correct': false,
        'explanation': 'Request scope applies only in web-aware ApplicationContexts.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-context-scopes']
      },
      'd': {
        'description': 'session',
        'correct': false,
        'explanation': 'Session scope also requires explicit declaration and web context.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/reference/html/web.html#mvc-servlet-context-scopes']
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Unless overridden, @Bean methods produce singleton beans in the Spring container.',
    'tags': ['Bean Scope', 'Configuration'],
    'category': 'Spring Core',
    'difficulty': 'easy'
  },
  {
    'id': 10,
    'date': '2025-05-12',
    'question': 'In which package is the AnnotationConfigApplicationContext class located?',
    'description': 'Provide the fully qualified package name for the class used to bootstrap a Java-config-based Spring context.',
    'answers': {
      'a': {
        'description': 'org.springframework.context.annotation',
        'correct': true,
        'explanation': 'AnnotationConfigApplicationContext resides in the org.springframework.context.annotation package.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/context/annotation/AnnotationConfigApplicationContext.html']
      },
      'b': {
        'description': 'org.springframework.context.config',
        'correct': false,
        'explanation': 'No such package in Spring; correct one uses .annotation.',
        'links': []
      },
      'c': {
        'description': 'org.springframework.core.annotation',
        'correct': false,
        'explanation': 'That package contains annotation utilities, not context implementation.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/core/annotation/package-summary.html']
      },
      'd': {
        'description': 'org.springframework.beans.factory.annotation',
        'correct': false,
        'explanation': 'This package contains bean-level annotations like @Autowired, not context classes.',
        'links': ['https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/package-summary.html']
      }
    },
    'multiple_correct_answers': false,
    'explanation': 'Use AnnotationConfigApplicationContext from the annotation package to load @Configuration classes.',
    'tags': ['Context', 'Java Configuration'],
    'category': 'Spring Context',
    'difficulty': 'medium'
  }
]
